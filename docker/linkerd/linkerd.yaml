admin:
  ip: 0.0.0.0
  port: 9990

usage:
  enabled: false

telemetry:
  - kind: io.l5d.zipkin
    host: zipkin
    port: 9410
    sampleRate: 1.0

#  - kind: io.l5d.prometheus
  - kind: io.l5d.recentRequests
    sampleRate: 1


namers:
  - kind: io.l5d.fs
    rootDir: /disco
  - kind: io.l5d.consul
    experimental: true
    host: consul-server
    port: 8500
    includeTag: false
    setHost: false

routers:

  # Use this router for linkerd-to-service
  # This server should be registered in service discovery so that incoming traffic
  # is served here.
  #- protocol: http
  #  label: incoming
  #  servers:
  #  - port: 4140
  #    ip: 0.0.0.0
  #  # Route all incoming traffic to the application service
  #  # (assumed to be running on port 80)
  #  dtab: |
  #    /local => /$/inet/127.1/80;
  #    /http/1.1/*/* => /local ;

  # Use this router for service-to-linkerd
  # The matching service instance should send all outgoing traffic to port 4141
  # so that linkerd may route it appropriately.
  #GATEWAY
  #- protocol: http
  #  label: outgoing
  #  servers:
  #  - port: 3141
  #    ip: 0.0.0.0
  #  # Route outgoing traffic based on the Host header
  #  dtab: |
  #    /http/1.1/* => /#/io.l5d.consul/dc1;



  # Use this router for linkerd-to-service
  # This server should be registered in service discovery so that incoming traffic
  # is served here.
  #ORDER-SERVICE
  #- protocol: http
  #  label: incoming-ORDER-SERVICE
  #  identifier:
  #    kind: io.l5d.methodAndHost
  #  servers:
  #  - port: 4140
  #    ip: 0.0.0.0
  #  # Route all incoming traffic to the application service
  #  # (assumed to be running on port 80)
  #  dtab: |
  #    /local => /#/io.l5d.consul/dc1;
  #    /svc/1.1/*/* => /local ;

  # Use this router for service-to-linkerd
  # The matching service instance should send all outgoing traffic to port 4141
  # so that linkerd may route it appropriately.
  - protocol: http
    label: outgoing-router
    httpAccessLog: access.log
    httpAccessLogRollPolicy: daily
    httpAccessLogAppend: true
    httpAccessLogRotateCount: -1
    identifier:
      kind: io.l5d.methodAndHost
    #    httpUriInDst: true
    tracePropagator:
      kind: io.l5d.zipkin
    dstPrefix: /http
    servers:
      - port: 4140
        ip: 0.0.0.0
    # Route outgoing traffic based on the Host header  #      /srv => /#/io.l5d.consul/dc1;
    dtab: |
      /srv         => /$/inet/127.1/4140 ;
      /srv => /#/io.l5d.consul/dc1;
      /host        => /srv ;
      /http/1.1/*  => /host ;
    service:
      retries:
        budget:
          minRetriesPerSec: 5
          percentCanRetry: 1
          ttlSecs: 15
        backoff:
          kind: jittered
          minMs: 10
          maxMs: 10000
      responseClassifier:
        kind: io.l5d.http.nonRetryable5XX
    client:
      failureAccrual:
        kind: io.l5d.consecutiveFailures
        failures: 3
        backoff:
          kind: constant
          ms: 10000

  - protocol: http
    label: incoming-router
    httpAccessLog: access.log
    httpAccessLogRollPolicy: daily
    httpAccessLogAppend: true
    httpAccessLogRotateCount: -1
    identifier:
      kind: io.l5d.methodAndHost
    #    httpUriInDst: true
    tracePropagator:
      kind: io.l5d.zipkin
    dstPrefix: /http
    servers:
      - port: 4141
        ip: 0.0.0.0
    # Route outgoing traffic based on the Host header
    dtab: |
      /srv         => /io.l5d.fs ;
      /srv => /#/io.l5d.consul/dc1;
      /host        => /srv ;
      /http/1.1/*  => /host ;
    service:
      retries:
        budget:
          minRetriesPerSec: 5
          percentCanRetry: 100
          ttlSecs: 15
        backoff:
          kind: jittered
          minMs: 10
          maxMs: 10000
      responseClassifier:
        kind: io.l5d.http.nonRetryable5XX
#    client:
#      kind: io.l5d.global
#      loadBalancer:
#        kind: roundRobin
#      failureAccrual:
#        kind: io.l5d.consecutiveFailures
#        failures: 3
#        backoff:
#          kind: constant
#          ms: 100000



    # Use this router for linkerd-to-service
    # This server should be registered in service discovery so that incoming traffic
    # is served here.
    #USER-SERVICE
    #- protocol: http
    #  label: incoming-USER-SERVICE
    #  servers:
    #  - port: 5140
    #    ip: 0.0.0.0
    #  # Route all incoming traffic to the application service
    #  # (assumed to be running on port 80)
    #  dtab: |
    #    /local => /$/inet/127.1/80;
    #    /http/1.1/*/* => /local ;

    # Use this router for service-to-linkerd
# The matching service instance should send all outgoing traffic to port 4141
# so that linkerd may route it appropriately.
#- protocol: http
#  label: outgoing-USER-SERVICE
#  servers:
#  - port: 5141
#    ip: 0.0.0.0
#  # Route outgoing traffic based on the Host header
#  dtab: |
#    /http/1.1/* => /#/io.l5d.consul/dc1;
